{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| High Precision Framework | 1.0.0",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/Unity.Geospatial.HighPrecision.DoubleBounds.html": {
    "href": "api/Unity.Geospatial.HighPrecision.DoubleBounds.html",
    "title": "Struct DoubleBounds | High Precision Framework | 1.0.0",
    "keywords": "Struct DoubleBounds Represents an axis aligned bounding box with values stored as doubles. Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [BurstCompile(CompileSynchronously = true)] [Serializable] public readonly struct DoubleBounds : IEquatable<DoubleBounds>, IFormattable Constructors DoubleBounds(double3, double3) Default constructor. Declaration public DoubleBounds(double3 center, double3 size) Parameters Type Name Description double3 center The location of the origin of the Bounds. double3 size The dimensions of the Bounds. Fields Center The center of the bounding box. Declaration public readonly double3 Center Field Value Type Description double3 Extents Distance between the center and the edges of the bounds. Declaration public readonly double3 Extents Field Value Type Description double3 Properties Empty Get a DoubleBounds instance that is considered empty (no position, no size). The empty bounds is preferred to the default when no content is required. Declaration public static readonly DoubleBounds Empty { get; } Property Value Type Description DoubleBounds IsEmpty true if the Center and Extents should not be considered; false otherwise. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean Max The maximal point of the box. This is always equal to center+extents. Declaration public readonly double3 Max { get; } Property Value Type Description double3 Min The minimal point of the box. This is always equal to center-extents. Declaration public readonly double3 Min { get; } Property Value Type Description double3 Size The total size of the box. This is always twice as large as the extents. Declaration public readonly double3 Size { get; } Property Value Type Description double3 Methods Contains(DoubleBounds) Is the given bounds limits are within the limits of this instance. Declaration public readonly bool Contains(DoubleBounds bounds) Parameters Type Name Description DoubleBounds bounds The DoubleBounds that must be within this instance. Returns Type Description Boolean true if the bounds is inside this instance; false if it is not entirely within this instance limits. Equals(Object) Validate obj is a DoubleBounds instance and have the same values as this instance. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare the values with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Overrides ValueType.Equals(Object) Equals(DoubleBounds) Validate an other DoubleBounds has the same values as this instance. Declaration public readonly bool Equals(DoubleBounds other) Parameters Type Name Description DoubleBounds other Compare the values with this instance. Returns Type Description Boolean true if both instances have the same values; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. Intersects(DoubleBounds) Does another bounding box intersect with an other bounding box? Check if the bounding box comes into contact with another bounding box. This returns a Boolean that is set to true if there is an intersection between bounds. Two bounds are intersecting if there is at least one point which is contained by both bounds. Points on the min and max limits (corners and edges) of the bounding box are considered inside. Declaration public readonly bool Intersects(DoubleBounds bounds) Parameters Type Name Description DoubleBounds bounds The other DoubleBounds to validate the intersection with. Returns Type Description Boolean true If the bounds intersects.; false if it doesn't touch it. ToString() Returns a formatted string for the bounds. Declaration public override readonly string ToString() Returns Type Description String The formatted string representing this instance. Overrides ValueType.ToString() ToString(String) Returns a formatted string for the bounds. Declaration public readonly string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The formatted string representing this instance. ToString(String, IFormatProvider) Returns a formatted string for the bounds. Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format A numeric format string. IFormatProvider formatProvider An object that specifies culture-specific formatting. Returns Type Description String The formatted string representing this instance. Transform(DoubleBounds, double4x4, DoublePlane) Apply a DoublePlane to the original DoubleBounds then translate / rotate / scale it according to the given transformMatrix . Declaration public static DoubleBounds Transform(DoubleBounds bounds, double4x4 transformMatrix, DoublePlane clipPlane) Parameters Type Name Description DoubleBounds bounds Instance to transform. double4x4 transformMatrix Translate / Rotate / Resize the bounds by this matrix. DoublePlane clipPlane Cut the resulting DoubleBounds by this plane. Returns Type Description DoubleBounds The result of the transformation. Transform3x4(DoubleBounds, double4x4) Transform a DoubleBounds instance by a matrix allowing to translate / turn / scale it. Declaration public static DoubleBounds Transform3x4(DoubleBounds bounds, double4x4 transformationMatrix) Parameters Type Name Description DoubleBounds bounds Instance to transform. double4x4 transformationMatrix Translate / Rotate / Resize the bounds by this matrix. Returns Type Description DoubleBounds The result of the transformation. Union(DoubleBounds, DoubleBounds) Join two DoubleBounds instance into a single instance resulting in the maximum size of both. Declaration public static DoubleBounds Union(DoubleBounds a, DoubleBounds b) Parameters Type Name Description DoubleBounds a DoubleBounds b Returns Type Description DoubleBounds Operators Equality(DoubleBounds, DoubleBounds) Validate both DoubleBounds have the same values. Declaration public static bool operator ==(DoubleBounds lhs, DoubleBounds rhs) Parameters Type Name Description DoubleBounds lhs First instance to compare with. DoubleBounds rhs Compare lhs with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Explicit(DoubleBounds to Bounds) Convert a DoubleBounds instance to a new single precision Unity Bounds instance. Declaration public static explicit operator Bounds(DoubleBounds bounds) Parameters Type Name Description DoubleBounds bounds The instance to convert. Returns Type Description Bounds A new Bounds instance. Explicit(Bounds to DoubleBounds) Convert a single precision Unity Bounds instance to a new DoubleBounds instance. Declaration public static explicit operator DoubleBounds(Bounds bounds) Parameters Type Name Description Bounds bounds The instance to convert. Returns Type Description DoubleBounds A new DoubleBounds instance. Inequality(DoubleBounds, DoubleBounds) Validate both DoubleBounds have the different values. Declaration public static bool operator !=(DoubleBounds lhs, DoubleBounds rhs) Parameters Type Name Description DoubleBounds lhs First instance to compare with. DoubleBounds rhs Compare lhs with this instance. Returns Type Description Boolean true if at least one value is different on both instances; false if both instance have the same values."
  },
  "api/Unity.Geospatial.HighPrecision.DoublePlane.html": {
    "href": "api/Unity.Geospatial.HighPrecision.DoublePlane.html",
    "title": "Struct DoublePlane | High Precision Framework | 1.0.0",
    "keywords": "Struct DoublePlane Representation of a plane in 3D space storing values as doubles. Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [BurstCompile(CompileSynchronously = true)] public readonly struct DoublePlane : IEquatable<DoublePlane>, IFormattable Constructors DoublePlane(double3, Double) Construct a DoublePlane instance using its normal and its distance from the origin. Declaration public DoublePlane(double3 normal, double distance) Parameters Type Name Description double3 normal The plane's normal vector which is perpendicular to the plane's surface. This is expected to be a unit vector. Double distance The distance the plane is from the origin. This distance can be easily determined by extending the normal vector from the origin until it intersects the plane. The distance can be negative to allow forward and back facing planes. DoublePlane(double3, double3) Construct a plane using an arbitrary point on the plane's surface and the plane's normal . Declaration public DoublePlane(double3 normal, double3 point) Parameters Type Name Description double3 normal The plane's normal vector which is perpendicular to the plane's surface. This is expected to be a unit vector. double3 point An arbitrary point which is included in the plane's domain. DoublePlane(double3, double3, double3) Construct a DoublePlane instance using three arbitrary points on the plane. The only constraint is that these points cannot be collinear. Declaration public DoublePlane(double3 a, double3 b, double3 c) Parameters Type Name Description double3 a First point on the plane. double3 b Second point on the plane. double3 c Third point on the plane. Properties Distance The distance measured from the Plane to the origin, along the Plane's normal. Declaration public readonly double Distance { get; } Property Value Type Description Double Flipped Returns a copy of the plane that faces in the opposite direction. Declaration public readonly DoublePlane Flipped { get; } Property Value Type Description DoublePlane Normal Normal vector of the plane. Declaration public readonly double3 Normal { get; } Property Value Type Description double3 Methods ClosestPointOnPlane(double3) For a given point returns the closest point on the plane. Declaration public readonly double3 ClosestPointOnPlane(double3 point) Parameters Type Name Description double3 point The point to project onto the plane. Returns Type Description double3 A point on the plane that is closest to point. Equals(Object) Validate obj is a DoublePlane instance and have the same values as this instance. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare the values with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Overrides ValueType.Equals(Object) Equals(DoublePlane) Validate an other DoublePlane have the same values as this instance. Declaration public readonly bool Equals(DoublePlane other) Parameters Type Name Description DoublePlane other Compare the values with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. GetDistanceToPoint(double3) Returns a signed distance from plane to point. Declaration public readonly double GetDistanceToPoint(double3 point) Parameters Type Name Description double3 point Get the distance from this point. Returns Type Description Double The distance between this instance with the given point . GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. GetSide(double3) Get on which side a the plane a given point is. Declaration public readonly bool GetSide(double3 point) Parameters Type Name Description double3 point Position to get its relative side. Returns Type Description Boolean true if the point is on the positive side of the plane; false otherwise. Raycast(double3, double3) Intersects a ray with the plane. Declaration public readonly double3 Raycast(double3 p1, double3 p2) Parameters Type Name Description double3 p1 One point positioned on the projected ray. double3 p2 A second point positioned on the projected ray. Returns Type Description double3 The distance along the ray, where it intersects the plane. SameSide(double3, double3) Are two points on the same side of the plane? Declaration public readonly bool SameSide(double3 point0, double3 point1) Parameters Type Name Description double3 point0 First point to evaluate. double3 point1 Get if this second point is on the same side as point0 . Returns Type Description Boolean true If both points are on the same side; false otherwise. ToString() Returns a formatted string for the plane. Declaration public override readonly string ToString() Returns Type Description String The formatted string representing this instance. Overrides ValueType.ToString() ToString(String) Returns a formatted string for the plane. Declaration public readonly string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The formatted string representing this instance. ToString(String, IFormatProvider) Returns a formatted string for the plane. Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format A numeric format string. IFormatProvider formatProvider An object that specifies culture-specific formatting. Returns Type Description String The formatted string representing this instance. Translate(double3) Returns a copy of the plane that is moved in space by the given translation. Declaration public readonly DoublePlane Translate(double3 translation) Parameters Type Name Description double3 translation The offset in space to move the plane with. Returns Type Description DoublePlane The translated plane. Operators Equality(DoublePlane, DoublePlane) Validate both DoublePlane have the same values. Declaration public static bool operator ==(DoublePlane lhs, DoublePlane rhs) Parameters Type Name Description DoublePlane lhs First instance to compare with. DoublePlane rhs Compare lhs with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Explicit(DoublePlane to Plane) Convert a DoublePlane instance to a new single precision Unity Plane instance. Declaration public static explicit operator Plane(DoublePlane plane) Parameters Type Name Description DoublePlane plane The instance to convert. Returns Type Description Plane A new Plane instance. Explicit(Plane to DoublePlane) Convert a single precision Unity Plane instance to a new DoublePlane instance. Declaration public static explicit operator DoublePlane(Plane plane) Parameters Type Name Description Plane plane The instance to convert. Returns Type Description DoublePlane A new DoublePlane instance. Inequality(DoublePlane, DoublePlane) Validate both DoublePlane have the different values. Declaration public static bool operator !=(DoublePlane lhs, DoublePlane rhs) Parameters Type Name Description DoublePlane lhs First instance to compare with. DoublePlane rhs Compare lhs with this instance. Returns Type Description Boolean true if at least one value is different on both instances; false if both instance have the same values."
  },
  "api/Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.html",
    "title": "Class CoordinateSystemInspector | High Precision Framework | 1.0.0",
    "keywords": "Class CoordinateSystemInspector Base class to tells an Editor class how to display the values of a custom LocalCoordinateSystem . Inheritance Object CoordinateSystemInspector DefaultCoordinateSystemInspector Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax public abstract class CoordinateSystemInspector Properties Name Unique name to display allowing to differentiate the related LocalCoordinateSystem from others. Declaration public abstract string Name { get; } Property Value Type Description String Methods GetScaleType(HPNode) Get the CoordinateSystemInspector.ScaleTypes of the given target . Declaration protected CoordinateSystemInspector.ScaleTypes GetScaleType(HPNode target) Parameters Type Name Description HPNode target Get the CoordinateSystemInspector.ScaleTypes values for this node. Returns Type Description CoordinateSystemInspector.ScaleTypes The CoordinateSystemInspector.ScaleTypes for the given target . GetTRS(HPNode, out double3, out quaternion, out float3) Get the actual translation, rotation and scale values of the target . Declaration protected void GetTRS(HPNode target, out double3 translation, out quaternion rotation, out float3 scale) Parameters Type Name Description HPNode target Get the transform values for this node. double3 translation Returns the position value of the target . quaternion rotation Returns the orientation value of the target . float3 scale Returns the scaling value of the target . Exceptions Type Condition InvalidOperationException If the target will be disposed. NotSupportedException If the target is not supported by this class. Custom HPNode implementations are not supported. OnInspectorGUI(HPNode) Custom IMGUI based GUI for the inspector for a given HPNode . Declaration public abstract void OnInspectorGUI(HPNode target) Parameters Type Name Description HPNode target Target to draw the inspector for. SetTRS(HPNode, double3, quaternion) Change the position and the orientation of the target . This will set the scaling to a uniform value of 1. Declaration protected void SetTRS(HPNode target, double3 translation, quaternion rotation) Parameters Type Name Description HPNode target Set the transform values to this node. double3 translation Change the target position to this value. quaternion rotation Change the target orientation to this value. Exceptions Type Condition InvalidOperationException If the target will be disposed. NotSupportedException If the target is not supported by this class. Custom HPNode implementations are not supported. SetTRS(HPNode, double3, quaternion, float3) Change the position, orientation and the scaling of the target . Declaration protected void SetTRS(HPNode target, double3 translation, quaternion rotation, float3 scale) Parameters Type Name Description HPNode target Set the transform values to this node. double3 translation Change the target position to this value. quaternion rotation Change the target orientation to this value. float3 scale Change the target size to this value. Exceptions Type Condition InvalidOperationException If the target will be disposed. NotSupportedException If the target is not supported by this class. Custom HPNode implementations are not supported."
  },
  "api/Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.ScaleTypes.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.ScaleTypes.html",
    "title": "Enum CoordinateSystemInspector.ScaleTypes | High Precision Framework | 1.0.0",
    "keywords": "Enum CoordinateSystemInspector.ScaleTypes Specify how to draw the scaling field. Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax public enum ScaleTypes Fields Name Description None The LocalCoordinateSystem does not support scaling. Isotropic Uniform scaling where x, y and z values are the same. Anisotropic None-uniform scaling."
  },
  "api/Unity.Geospatial.HighPrecision.Editor.DefaultCoordinateSystemInspector.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.DefaultCoordinateSystemInspector.html",
    "title": "Class DefaultCoordinateSystemInspector | High Precision Framework | 1.0.0",
    "keywords": "Class DefaultCoordinateSystemInspector Tells an Editor class how to display the LocalCoordinateSystem values. Inheritance Object CoordinateSystemInspector DefaultCoordinateSystemInspector Inherited Members CoordinateSystemInspector.GetScaleType(HPNode) CoordinateSystemInspector.GetTRS(HPNode, double3, quaternion, float3) CoordinateSystemInspector.SetTRS(HPNode, double3, quaternion) CoordinateSystemInspector.SetTRS(HPNode, double3, quaternion, float3) Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax public class DefaultCoordinateSystemInspector : CoordinateSystemInspector Properties Name Unique name to display allowing to differentiate the related LocalCoordinateSystem from others. Declaration public override string Name { get; } Property Value Type Description String Overrides CoordinateSystemInspector.Name Methods OnInspectorGUI(HPNode) Custom IMGUI based GUI for the inspector for a given HPNode . Declaration public override void OnInspectorGUI(HPNode target) Parameters Type Name Description HPNode target Target to draw the inspector for. Overrides CoordinateSystemInspector.OnInspectorGUI(HPNode)"
  },
  "api/Unity.Geospatial.HighPrecision.Editor.EditorGUILayoutWrapper.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.EditorGUILayoutWrapper.html",
    "title": "Class EditorGUILayoutWrapper | High Precision Framework | 1.0.0",
    "keywords": "Class EditorGUILayoutWrapper UI library used to display the High Precision Component fields. Inheritance Object EditorGUILayoutWrapper Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax public class EditorGUILayoutWrapper Methods BeginFoldoutHeaderGroup(Boolean, String) Make a label with a foldout arrow to the left of it. This is useful for folder-like structures, where child objects only appear if you've unfolded the parent folder. This control cannot be nested in another BeginFoldoutHeaderGroup. To use multiple of these foldouts, you must end each method with EndFoldoutHeaderGroup() . Declaration public virtual bool BeginFoldoutHeaderGroup(bool foldout, string content) Parameters Type Name Description Boolean foldout The shown foldout state. String content The label to show. Returns Type Description Boolean The foldout state selected by the user. true if you should render sub-objects.; false otherwise. Double3Field(String, double3, String, String, String) Make a text field for entering 3 fields containing each a double value. Declaration public virtual double3 Double3Field(string label, double3 value, string labelX = \"X\", string labelY = \"Y\", string labelZ = \"Z\") Parameters Type Name Description String label Optional label to display in front of the fields. double3 value The value to edit. String labelX Text to display in front of the first float field. String labelY Text to display in front of the second float field. String labelZ Text to display in front of the third float field. Returns Type Description double3 The value entered by the user. EndFoldoutHeaderGroup() Closes a group started with BeginFoldoutHeaderGroup(Boolean, String) . Declaration public virtual void EndFoldoutHeaderGroup() Float1Field(String, Single) Make a text field for entering a single float value. Declaration public virtual float Float1Field(string label, float value) Parameters Type Name Description String label Optional label to display in front of the fields. Single value The value to edit. Returns Type Description Single The value entered by the user. Float3Field(String, float3, String, String, String) Make a text field for entering 3 fields containing each a float value. Declaration public virtual float3 Float3Field(string label, float3 value, string labelX = \"X\", string labelY = \"Y\", string labelZ = \"Z\") Parameters Type Name Description String label Optional label to display in front of the fields. float3 value The value to edit. String labelX Text to display in front of the first float field. String labelY Text to display in front of the second float field. String labelZ Text to display in front of the third float field. Returns Type Description float3 The value entered by the user. HelpBox(String, MessageType, Boolean) Make a help box with a message to the user. Declaration public virtual void HelpBox(string message, MessageType type, bool wide = true) Parameters Type Name Description String message The message text. MessageType type The type of message. Boolean wide true the box will cover the whole width of the window; false otherwise it will cover the controls part only. Label(String) Make an auto-layout label. Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Declaration public virtual void Label(string str) Parameters Type Name Description String str Text to display on the label. Popup(String, Int32, String[]) Make a generic popup selection field. Declaration public virtual int Popup(string label, int selectedIndex, string[] displayedOptions) Parameters Type Name Description String label Optional label in front of the field. Int32 selectedIndex The index of the option the field shows. String [] displayedOptions An array with the options shown in the popup. Returns Type Description Int32 The index of the option that has been selected by the user."
  },
  "api/Unity.Geospatial.HighPrecision.Editor.HPNodeInspector.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.HPNodeInspector.html",
    "title": "Class HPNodeInspector | High Precision Framework | 1.0.0",
    "keywords": "Class HPNodeInspector Base class with methods allowing to display the coordinate fields in the Unity Inspector. Inheritance Object Object ScriptableObject Editor HPNodeInspector HPRootInspector HPTransformInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax public abstract class HPNodeInspector : Editor, IPreviewable, IToolModeOwner Methods OnEnable() This function is called when the object is loaded. Declaration public virtual void OnEnable() OnInspectorGUI() Custom IMGUI based GUI for the inspector. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.HighPrecision.Editor.HPRootInspector.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.HPRootInspector.html",
    "title": "Class HPRootInspector | High Precision Framework | 1.0.0",
    "keywords": "Class HPRootInspector Class to display the HPRoot fields inside the Unity inspector. Inheritance Object Object ScriptableObject Editor HPNodeInspector HPRootInspector Inherited Members HPNodeInspector.OnEnable() HPNodeInspector.OnInspectorGUI() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(HPRoot))] public class HPRootInspector : HPNodeInspector, IPreviewable, IToolModeOwner"
  },
  "api/Unity.Geospatial.HighPrecision.Editor.HPTransformInspector.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.HPTransformInspector.html",
    "title": "Class HPTransformInspector | High Precision Framework | 1.0.0",
    "keywords": "Class HPTransformInspector Class to display the HPTransform fields inside the Unity inspector Inheritance Object Object ScriptableObject Editor HPNodeInspector HPTransformInspector Inherited Members HPNodeInspector.OnEnable() HPNodeInspector.OnInspectorGUI() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(HPTransform))] public class HPTransformInspector : HPNodeInspector, IPreviewable, IToolModeOwner Methods OnDisable() This function is called when the scriptable object goes out of scope. Declaration public void OnDisable()"
  },
  "api/Unity.Geospatial.HighPrecision.Editor.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.html",
    "title": "Namespace Unity.Geospatial.HighPrecision.Editor | High Precision Framework | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.HighPrecision.Editor Classes CoordinateSystemInspector Base class to tells an Editor class how to display the values of a custom LocalCoordinateSystem . DefaultCoordinateSystemInspector Tells an Editor class how to display the LocalCoordinateSystem values. EditorGUILayoutWrapper UI library used to display the High Precision Component fields. HPNodeInspector Base class with methods allowing to display the coordinate fields in the Unity Inspector. HPRootInspector Class to display the HPRoot fields inside the Unity inspector. HPTransformInspector Class to display the HPTransform fields inside the Unity inspector TransformEditorOverride Change the default display of the Transform within the Unity inspector. Enums CoordinateSystemInspector.ScaleTypes Specify how to draw the scaling field."
  },
  "api/Unity.Geospatial.HighPrecision.Editor.TransformEditorOverride.html": {
    "href": "api/Unity.Geospatial.HighPrecision.Editor.TransformEditorOverride.html",
    "title": "Class TransformEditorOverride | High Precision Framework | 1.0.0",
    "keywords": "Class TransformEditorOverride Change the default display of the Transform within the Unity inspector. Inheritance Object Object ScriptableObject Editor TransformEditorOverride Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(Transform), true)] [CanEditMultipleObjects] public class TransformEditorOverride : Editor, IPreviewable, IToolModeOwner Methods OnInspectorGUI() Custom IMGUI based GUI for the inspector. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.HighPrecision.HPMath.html": {
    "href": "api/Unity.Geospatial.HighPrecision.HPMath.html",
    "title": "Class HPMath | High Precision Framework | 1.0.0",
    "keywords": "Class HPMath Mathematics methods used for easily converting data between geodetic formats and Unity default expected formats. Inheritance Object HPMath Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [BurstCompile(CompileSynchronously = true)] public static class HPMath Methods AxisAngleDegrees(float3, Single) Returns a quaternion representing a rotation around a unit axis by an angle in degrees. The rotation direction is clockwise when looking along the rotation axis towards the origin. Declaration public static quaternion AxisAngleDegrees(float3 axis, float angle) Parameters Type Name Description float3 axis The axis of rotation. Single angle The angle of rotation in degrees. Returns Type Description quaternion The quaternion representing a rotation around an axis. EulerZXYDegrees(float3) Returns a quaternion constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in degrees and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. Declaration public static quaternion EulerZXYDegrees(float3 xyz) Parameters Type Name Description float3 xyz A float3 vector containing the rotation angles around the x-, y- and z-axis measures in degrees. Returns Type Description quaternion The quaternion representing the Euler angle rotation in z-x-y order. GetEulerDegrees(quaternion) Returns the Euler angle representation of the quaternion following the ZYX rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. Declaration public static float3 GetEulerDegrees(this quaternion rotation) Parameters Type Name Description quaternion rotation The quaternion to convert to Euler angles. Returns Type Description float3 The Euler angle representation of the quaternion in ZYX order. GetEulerZXY(quaternion) Returns the Euler angle representation of the quaternion following the ZYX rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. Declaration public static float3 GetEulerZXY(this quaternion rotation) Parameters Type Name Description quaternion rotation The quaternion to convert to Euler angles. Returns Type Description float3 The Euler angle representation of the quaternion in ZYX order. GetRotation(double4x4) Get the rotation part of a matrix as a quaternion expressed in radians. Declaration public static quaternion GetRotation(this double4x4 matrix) Parameters Type Name Description double4x4 matrix Matrix to extract the rotation from. Returns Type Description quaternion The rotation result. GetScale(double4x4) Get the scaling part of a matrix. Declaration public static float3 GetScale(this double4x4 matrix) Parameters Type Name Description double4x4 matrix Matrix to extract the scaling from. Returns Type Description float3 The scaling result. GetTranslation(double4x4) Get the position part of a matrix. Declaration public static double3 GetTranslation(this double4x4 matrix) Parameters Type Name Description double4x4 matrix Matrix to extract the position from. Returns Type Description double3 The position result. GetTRS(double4x4, out double3, out quaternion, out float3) Get the translation , rotation and scale part of the given matrix . Declaration public static void GetTRS(this double4x4 matrix, out double3 translation, out quaternion rotation, out float3 scale) Parameters Type Name Description double4x4 matrix The matrix requested to get its translation , rotation and scale from. double3 translation Returns the position part. quaternion rotation Returns the orientation part. float3 scale Returns the resize part. Translate(double3) Returns a double4x4 translation matrix given a double3 translation vector. Declaration public static double4x4 Translate(double3 vector) Parameters Type Name Description double3 vector The translation vector. Returns Type Description double4x4 The double4x4 translation matrix. TRS(double3, quaternion, float3) Returns a double4x4 matrix representing a combined scale-, rotation- and translation transform. Equivalent to mul(translationTransform, mul(rotationTransform, scaleTransform)). Declaration public static double4x4 TRS(double3 translation, quaternion rotation, float3 scale) Parameters Type Name Description double3 translation The translation vector. quaternion rotation The quaternion rotation. float3 scale The scaling factors of each axis. Returns Type Description double4x4 The double4x4 matrix representing the translation, rotation, and scale by the inputs."
  },
  "api/Unity.Geospatial.HighPrecision.HPNode.html": {
    "href": "api/Unity.Geospatial.HighPrecision.HPNode.html",
    "title": "Class HPNode | High Precision Framework | 1.0.0",
    "keywords": "Class HPNode High Precision node allowing to get its local and universe position in double precision. Inheritance Object Object Component Behaviour MonoBehaviour HPNode HPRoot HPTransform Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax public abstract class HPNode : MonoBehaviour Remarks This interface is not intended to be implemented outside of this package. Fields m_Children List of the child nodes of this instance. Those nodes will multiply their LocalMatrix by this instance UniverseMatrix to get their UniverseMatrix and same thing for the WorldMatrix . Declaration protected readonly List<HPTransform> m_Children Field Value Type Description List < HPTransform > Properties LocalMatrix Translation, rotation and scaling information relative to its direct parent. Declaration public abstract double4x4 LocalMatrix { get; } Property Value Type Description double4x4 LocalPosition Translation information relative to its direct parent. Declaration public abstract double3 LocalPosition { get; set; } Property Value Type Description double3 LocalRotation Orientation information relative to its direct parent. Declaration public abstract quaternion LocalRotation { get; set; } Property Value Type Description quaternion LocalScale Scaling information relative to its direct parent. Declaration public abstract float3 LocalScale { get; set; } Property Value Type Description float3 UniverseMatrix Translation, rotation and scaling information relative to the center of the universe. This value should not consider any rebasing system. Declaration public abstract double4x4 UniverseMatrix { get; } Property Value Type Description double4x4 UniversePosition Translation information relative to the center of the universe. This value should not consider any rebasing system. Declaration public abstract double3 UniversePosition { get; set; } Property Value Type Description double3 UniverseRotation Orientation information relative to the center of the universe. This value should not consider any rebasing system. Declaration public abstract quaternion UniverseRotation { get; set; } Property Value Type Description quaternion WorldMatrix Translation, rotation and scaling information relative to the Unity world center. Declaration public abstract double4x4 WorldMatrix { get; } Property Value Type Description double4x4 Methods RegisterChild(HPTransform) Set a as a child of this instance. This should always be in sync with the Unity hierarchy and serves as an acceleration structure for computing hierarchical transform. Declaration public virtual void RegisterChild(HPTransform child) Parameters Type Name Description HPTransform child Node to register UnregisterChild(HPTransform) Remove a HPTransform from the list of registered children. Declaration public virtual void UnregisterChild(HPTransform child) Parameters Type Name Description HPTransform child Node to unregister."
  },
  "api/Unity.Geospatial.HighPrecision.HPNode.ScaleTypes.html": {
    "href": "api/Unity.Geospatial.HighPrecision.HPNode.ScaleTypes.html",
    "title": "Enum HPNode.ScaleTypes | High Precision Framework | 1.0.0",
    "keywords": "Enum HPNode.ScaleTypes The type of scale that the HPNode's current configuration allows. When it is a leaf node, it will accept non-uniform scales. Otherwise, it will only apply a uniform scale. Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax public enum ScaleTypes Fields Name Description Anisotropic A non uniform scale, which has an x, y and z component Isotropic A uniform scale, where only the x component is considered"
  },
  "api/Unity.Geospatial.HighPrecision.HPRoot.html": {
    "href": "api/Unity.Geospatial.HighPrecision.HPRoot.html",
    "title": "Class HPRoot | High Precision Framework | 1.0.0",
    "keywords": "Class HPRoot The HPRoot determines how the universe space will be converted into world space. It defines the coordinate in universe space which corresponds to the position of the GameObject, in world space. Inheritance Object Object Component Behaviour MonoBehaviour HPNode HPRoot Inherited Members HPNode.m_Children HPNode.RegisterChild(HPTransform) HPNode.UnregisterChild(HPTransform) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [ExecuteAlways] [AddComponentMenu(\"HighPrecision/HPRoot\")] public class HPRoot : HPNode Properties LocalMatrix Translation, rotation and scaling information relative to its direct parent. Declaration public override double4x4 LocalMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.LocalMatrix LocalPosition Translation information relative to its direct parent. Declaration public override double3 LocalPosition { get; set; } Property Value Type Description double3 Overrides HPNode.LocalPosition LocalRotation Orientation information relative to its direct parent. Declaration public override quaternion LocalRotation { get; set; } Property Value Type Description quaternion Overrides HPNode.LocalRotation LocalScale Scaling information relative to its direct parent. Declaration public override float3 LocalScale { get; set; } Property Value Type Description float3 Overrides HPNode.LocalScale RootUniversePosition Set the position in universe space which corresponds to the HPRoot's position in the scene. Declaration public double3 RootUniversePosition { get; set; } Property Value Type Description double3 RootUniverseRotation Set the rotation of the universe space which corresponds to the HPRoot's rotation in the scene. Declaration public quaternion RootUniverseRotation { get; set; } Property Value Type Description quaternion UniverseMatrix Translation, rotation and scaling information relative to the center of the universe. This value should not consider any rebasing system. Declaration public override double4x4 UniverseMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.UniverseMatrix UniversePosition Translation information relative to the center of the universe. This value should not consider any rebasing system. Declaration public override double3 UniversePosition { get; set; } Property Value Type Description double3 Overrides HPNode.UniversePosition UniverseRotation Orientation information relative to the center of the universe. This value should not consider any rebasing system. Declaration public override quaternion UniverseRotation { get; set; } Property Value Type Description quaternion Overrides HPNode.UniverseRotation WorldMatrix Translation, rotation and scaling information relative to the Unity world center. Declaration public override double4x4 WorldMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.WorldMatrix Methods SetRootTR(double3, quaternion) Simultaneously set root universe position and root universe rotation in a single call, updating underlying transforms only once. Declaration public void SetRootTR(double3 position, quaternion rotation) Parameters Type Name Description double3 position The position in universe space which corresponds to the HPRoot's position in the scene quaternion rotation The position in universe space which corresponds to the HPRoot's rotation in the scene"
  },
  "api/Unity.Geospatial.HighPrecision.HPTransform.html": {
    "href": "api/Unity.Geospatial.HighPrecision.HPTransform.html",
    "title": "Class HPTransform | High Precision Framework | 1.0.0",
    "keywords": "Class HPTransform The HPTransform is the High-Precision Framework's primary class. It acts very similarly to an ordinary transform, however its position is in 64 bit precision rather than being in 32 bit precision. The HPTransform can be used with or without an HPRoot parent. However, in order to truly benefit from the 64 bit precision, it should be the child of an HPRoot. Inheritance Object Object Component Behaviour MonoBehaviour HPNode HPTransform Inherited Members HPNode.m_Children MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [ExecuteAlways] [DisallowMultipleComponent] [AddComponentMenu(\"HighPrecision/HPTransform\")] public class HPTransform : HPNode Properties Forward The HPTransform's forward vector, in universe space. Declaration public float3 Forward { get; } Property Value Type Description float3 LocalMatrix Translation, rotation and scaling information relative to its direct parent. Declaration public override double4x4 LocalMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.LocalMatrix LocalPosition The position of the HPTransform relative to its parent HPRoot or HPTransform Declaration public override double3 LocalPosition { get; set; } Property Value Type Description double3 Overrides HPNode.LocalPosition LocalRotation The rotation of the HPTransform relative to its parent HPTransform or HPRoot Declaration public override quaternion LocalRotation { get; set; } Property Value Type Description quaternion Overrides HPNode.LocalRotation LocalScale The scale of the HPTransform, relative to its parent HPTransform or HPRoot. If the HPTransform is not a leaf node (i.e. if it contains another HPTransform) only uniform scales will be possible. Under these circumstances, only the x component of the scale will count towards the uniform scale. Declaration public override float3 LocalScale { get; set; } Property Value Type Description float3 Overrides HPNode.LocalScale Parent Set or get the parent of the HPTransform. When changing the parent, the HPTransform's position in the world will be preserved. Declaration public Transform Parent { get; set; } Property Value Type Description Transform Right The HPTransform's right vector, in universe space. Declaration public float3 Right { get; } Property Value Type Description float3 ScaleType The type of scale that is currently supported by the HPTransform. When in uniform scale, only the x component of the set scale will be considered for the uniform scale. Declaration public HPNode.ScaleTypes ScaleType { get; } Property Value Type Description HPNode.ScaleTypes UniverseMatrix Translation, rotation and scaling information relative to the center of the universe. This value should not consider any rebasing system. Declaration public override double4x4 UniverseMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.UniverseMatrix UniversePosition The position of the HPTransform, in universe space. Declaration public override double3 UniversePosition { get; set; } Property Value Type Description double3 Overrides HPNode.UniversePosition UniverseRotation The rotation of the HPTransform, in universe space Declaration public override quaternion UniverseRotation { get; set; } Property Value Type Description quaternion Overrides HPNode.UniverseRotation Up The HPTransform's up vector, in universe space. Declaration public float3 Up { get; } Property Value Type Description float3 WorldMatrix Translation, rotation and scaling information relative to the Unity world center. Declaration public override double4x4 WorldMatrix { get; } Property Value Type Description double4x4 Overrides HPNode.WorldMatrix Methods RegisterChild(HPTransform) Set a as a child of this instance. This should always be in sync with the Unity hierarchy and serves as an acceleration structure for computing hierarchical transform. Declaration public override void RegisterChild(HPTransform child) Parameters Type Name Description HPTransform child Node to register Overrides HPNode.RegisterChild(HPTransform) SetLocalPosition(double3) Set the position of the HPTransform relative to its parent HPRoot or HPTransform Declaration public void SetLocalPosition(double3 position) Parameters Type Name Description double3 position Change the LocalPosition to this value. UnregisterChild(HPTransform) Remove a HPTransform from the list of registered children. Declaration public override void UnregisterChild(HPTransform child) Parameters Type Name Description HPTransform child Node to unregister. Overrides HPNode.UnregisterChild(HPTransform)"
  },
  "api/Unity.Geospatial.HighPrecision.html": {
    "href": "api/Unity.Geospatial.HighPrecision.html",
    "title": "Namespace Unity.Geospatial.HighPrecision | High Precision Framework | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.HighPrecision Classes HPMath Mathematics methods used for easily converting data between geodetic formats and Unity default expected formats. HPNode High Precision node allowing to get its local and universe position in double precision. HPRoot The HPRoot determines how the universe space will be converted into world space. It defines the coordinate in universe space which corresponds to the position of the GameObject, in world space. HPTransform The HPTransform is the High-Precision Framework's primary class. It acts very similarly to an ordinary transform, however its position is in 64 bit precision rather than being in 32 bit precision. The HPTransform can be used with or without an HPRoot parent. However, in order to truly benefit from the 64 bit precision, it should be the child of an HPRoot. LocalCoordinateSystem The LocalCoordinateSystem component causes any HPTransform to be defined as the center of interest within the universe space. This will maximize rendering precision around this object by essentially keeping it in the center of the scene. For many applications, the camera or the player makes for a good candidate as the origin HPTransform. This component is meant as an example of how to implement a very simple dynamic rebasing scheme. However, many other schemes can and should be considered, such as rebasing only when getting a predefined distance from the origin or event triggered rebasing when the user performs an action. MathExtension Extend Unity mathematics structs. MatrixExtension Extension methods for Unity Matrix4x4 . Structs DoubleBounds Represents an axis aligned bounding box with values stored as doubles. DoublePlane Representation of a plane in 3D space storing values as doubles. SerializableDoubleBounds This struct should only be used for serialization purposes within Unity, either in MonoBehaviours, such that it can appear in the inspector, or for JSON serialization. For any purpose that does not require serialization, please use DoubleBounds . Cast as quickly as you can to the DoubleBounds struct which is immutable. Enums HPNode.ScaleTypes The type of scale that the HPNode's current configuration allows. When it is a leaf node, it will accept non-uniform scales. Otherwise, it will only apply a uniform scale."
  },
  "api/Unity.Geospatial.HighPrecision.LocalCoordinateSystem.html": {
    "href": "api/Unity.Geospatial.HighPrecision.LocalCoordinateSystem.html",
    "title": "Class LocalCoordinateSystem | High Precision Framework | 1.0.0",
    "keywords": "Class LocalCoordinateSystem The LocalCoordinateSystem component causes any HPTransform to be defined as the center of interest within the universe space. This will maximize rendering precision around this object by essentially keeping it in the center of the scene. For many applications, the camera or the player makes for a good candidate as the origin HPTransform. This component is meant as an example of how to implement a very simple dynamic rebasing scheme. However, many other schemes can and should be considered, such as rebasing only when getting a predefined distance from the origin or event triggered rebasing when the user performs an action. Inheritance Object Object Component Behaviour MonoBehaviour LocalCoordinateSystem Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [RequireComponent(typeof(HPRoot))] public class LocalCoordinateSystem : MonoBehaviour Properties Origin The object who's position and rotation will correspond to the origin of the scene. It's position, in world space will be zero, and it's rotation will be identity. Declaration public HPTransform Origin { get; set; } Property Value Type Description HPTransform"
  },
  "api/Unity.Geospatial.HighPrecision.MathExtension.html": {
    "href": "api/Unity.Geospatial.HighPrecision.MathExtension.html",
    "title": "Class MathExtension | High Precision Framework | 1.0.0",
    "keywords": "Class MathExtension Extend Unity mathematics structs. Inheritance Object MathExtension Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax public static class MathExtension Methods ToDouble3(Vector3) Convert a Unity Vector3 to a double3 instance. Declaration public static double3 ToDouble3(this Vector3 vector) Parameters Type Name Description Vector3 vector Point to convert. Returns Type Description double3 The convert point. ToMatrix4x4(double4x4) Convert a double4x4 instance to a Unity Vector3 instance. Declaration public static Matrix4x4 ToMatrix4x4(this double4x4 matrix) Parameters Type Name Description double4x4 matrix Matrix to convert. Returns Type Description Matrix4x4 The convert matrix. ToVector3(double3) Convert a double3 instance to a Unity Vector3 instance. Declaration public static Vector3 ToVector3(this double3 vector) Parameters Type Name Description double3 vector Point to convert. Returns Type Description Vector3 The convert point."
  },
  "api/Unity.Geospatial.HighPrecision.MatrixExtension.html": {
    "href": "api/Unity.Geospatial.HighPrecision.MatrixExtension.html",
    "title": "Class MatrixExtension | High Precision Framework | 1.0.0",
    "keywords": "Class MatrixExtension Extension methods for Unity Matrix4x4 . Inheritance Object MatrixExtension Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax public static class MatrixExtension Methods GetTRS(Matrix4x4, out double3, out quaternion, out float3) Get the translation , rotation and scale part of the given matrix . Declaration public static void GetTRS(this Matrix4x4 matrix, out double3 translation, out quaternion rotation, out float3 scale) Parameters Type Name Description Matrix4x4 matrix The matrix requested to get its translation , rotation and scale from. double3 translation Returns the position part. quaternion rotation Returns the orientation part. float3 scale Returns the resize part. ToDouble4x4(Matrix4x4) Convert a unity Matrix4x4 instance to a new Unity mathematics double4x4 instance. Declaration public static double4x4 ToDouble4x4(this Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The instance to convert. Returns Type Description double4x4 A new double4x4 instance."
  },
  "api/Unity.Geospatial.HighPrecision.SerializableDoubleBounds.html": {
    "href": "api/Unity.Geospatial.HighPrecision.SerializableDoubleBounds.html",
    "title": "Struct SerializableDoubleBounds | High Precision Framework | 1.0.0",
    "keywords": "Struct SerializableDoubleBounds This struct should only be used for serialization purposes within Unity, either in MonoBehaviours, such that it can appear in the inspector, or for JSON serialization. For any purpose that does not require serialization, please use DoubleBounds . Cast as quickly as you can to the DoubleBounds struct which is immutable. Namespace : Unity.Geospatial.HighPrecision Assembly : solution.dll Syntax [Serializable] public struct SerializableDoubleBounds Constructors SerializableDoubleBounds(DoubleBounds) Default constructor, using a DoubleBounds . Declaration public SerializableDoubleBounds(DoubleBounds bounds) Parameters Type Name Description DoubleBounds bounds The bounds which should be copied into the serializable version Fields Center The center of the bounds Declaration public double3 Center Field Value Type Description double3 Extents The extent of the bounds, or the vector that can run from the center of the bounds to each of the corners. Declaration public double3 Extents Field Value Type Description double3 Operators Explicit(DoubleBounds to SerializableDoubleBounds) Cast from DoubleBounds Declaration public static explicit operator SerializableDoubleBounds(DoubleBounds bounds) Parameters Type Name Description DoubleBounds bounds The DoubleBounds to be casted from Returns Type Description SerializableDoubleBounds A new SerializableDoubleBounds instance. Explicit(SerializableDoubleBounds to DoubleBounds) Cast to DoubleBounds Declaration public static explicit operator DoubleBounds(SerializableDoubleBounds bounds) Parameters Type Name Description SerializableDoubleBounds bounds The SerializableDoubleBounds to be casted from Returns Type Description DoubleBounds A new DoubleBounds instance. Explicit(SerializableDoubleBounds to Bounds) Convert a SerializableDoubleBounds instance to a new single precision Unity Bounds instance. Declaration public static explicit operator Bounds(SerializableDoubleBounds bounds) Parameters Type Name Description SerializableDoubleBounds bounds The instance to convert. Returns Type Description Bounds A new Bounds instance."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | High Precision Framework | 1.0.0",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [1.0.0] - 2022-06-15 Added Add .samples.json file according to validation tools Fix Remove stray meta file in samples Adjust changelog line spacing such that documentation can be correctly generated [1.0.0-preview.4] - 2022-06-14 Added HPF Sample Scene Modified SerializableDoubleBounds can be explicitly cast to Bounds [1.0.0-preview.3] - 2022-06-02 Modified HPNode is now an abstract class instead of an interface. Updated the documentation with the samples scene. [1.0.0-preview.2] - 2022-05-20 Added SerializableDoubleBounds to allow for easy DoubleBounds serialization Modified Make DoubleBounds readonly [1.0.0-preview.1] - 2022-05-11 Modified Merged CoordinateSystemInspector.TargetTransform and CoordinateSystemInspector.TargetRoot to CoordinateSystemInspector.Target Removed HPNode.NodeType Limit the API access Removed Unity.Geospatial.HighPrecision.Internal namespace [1.0.0-preview.0] - 2022-05-11 Added Add Known Limitations documentation. Modified Changed DBound Empty evaluation to be a bool instead of a negative value. Now using Unity.Mathematics DMatrix4x4, DVector2, DVector3, DVector4 have been removed Changed namespaces to Unity.Geospatial.HighPrecision Fix HPTransform not updating Transform on Reset and on Paste Component Values [0.3.3-preview.0] - 2021-10-03 Fix Fix a bug where scale is not currently updated in HPTransform [0.3.2-preview.0] - 2021-09-16 Modified Migrate to Standard Unity Package format Split High Precision Framework repo from Streaming Framework Migrate documentation from Sphinx to Unity DocTools Added Union Operation to Bounds Yamato Test integration Add API in HPRoot to transform points, directions, and rotations between universe space and world space [0.3.1-preview.3] - 2021-06-04 Added Support for multiple cameras A geodetic extent object which can be reused to define an extent for modifiers. The extent can also be modified at play-time. Modified Extent modifier to use the new geodetic extent object Extent modifier to support multiple vertex streams Documentation to reflect changes made to the extent modifier. Fix Memory leak which was detected in previous version [0.3.1-preview.2] - 2021-05-15 Added Support for hierarchical OGC 3DTiles tilesets Ability to generate HP Framework package only Modified Move 3DTile json parsing to another thread Split Universal decoder processing over multiple frames to reduce overall impact on performance Prioritize tiles based on the ratio between their geometric error and their error specification, causing closer objects to load first rather than the opposite in previous implementation. [0.3.1-preview.1] - 2021-05-12 Added Geospatial Synchronization Context to better control execution time of await/async in GLTFast. Modified Make it possible to have an Camera that is located in world space rather than being located in Universe space. Make it possible for extent modifier to deal with children [0.3.1-preview.0] - 2021-05-10 Added Universal OGC 3D Tiles loader Dependency on GLTFast for 3D tile loader Modified HPTransform optimizations Changes to the internal presenter structure to support children (required for GLTFast) [0.3.0-preview.0] - 2021-04-02 Added HDRP Support via HDRP Material Factory UGSystem Modifier Stack UGExtentModifier to remove or contain dataset extents HDRP Test project (dev only) ECEF Coordinate system inspector Force-Lit texture support on Cesium-Native, allowing unlit datasets to be pushed into lit shaders for relighting Presenter concept has been added to UGSystem, allowing datasets to be spawned on different render layers as well as on different GameObjects. Modified Significant changes to documentation Moved away from .unitypackage and into package manager workflow UGSystem has become UGSystemBehaviour. Similar name changes have been made across the API for a uniform naming convention and preparation for future DOTS support. Changed the way sample datasets are loaded via package manager Import through package manager rather than .unitypackage UGSystem now uses a node graph for it's processing across multiple internal modules. This standardizes the way processing is done within the system. HPTransform coordinate system is now saved to editor preference rather than static variables, ensuring coherence from edit to play mode and from HPTransform to HPRoot and vice-versa. Geodetic coordinate system inspector now shows pitch, yaw and roll rather than heading, pitch, roll. Order has been changed to fit with Euler angles and nomenclature has been standardized to something more familiar. Build script has been cleaned up (dev only) Demo application has been migrated to HDRP UGSystem configuration errors will show a single explicit error message rather than pop an undescript message on every frame. Cesium Native error messages are still non-descript. Implemented proper error message on missing Cesium-Ion token [0.2.1-preview.0] - 2021-02-25 Fixed Perpetual dialog that opened up when adding an HPTransform to a prefab. [0.2.0-preview.0] - 2021-02-22 Modified THIS IS A COMPLETELY NEW VERSION OF THE API THAT INCORPORATES A HIGH PRECISION RENDERING FRAMEWORK. SEE BELOW FOR PRIMARY CHANGES: The UGCamera must now be a child of the UGSystem The UGCamera must now have an HPTransform component The UGSystem must now have an HPRoot component The UGSkybox must now be a child of the UGSystem The UGSkybox must now have an HPTransform component Static rebasing is no longer implemented by the UGSystem, rather it is implemented via the HPRoot. This allows for dynamic rebasing as well as static rebasing, via the HPRoot/HPTransform. All objects instantiated by the UGSystem now have an HPTransform component. [0.1.0-preview.5] - 2020-12-15 Added Docs: Doxygen + Breathe for API docs Docs: Wrote API docs for primary classes Makefile: Automated zip archive for builds Makefile: Added Unity Tests to build pipeline Modified Fly Camera script has been modified such that it is no possible to disable the automatic clip plane adjustements Build Preprocessor populates required shaders in build Terrain shaders had a Red Color that was shown when textures are not loaded. This was intended for debugging issues during development, not in a release. A UNITY_GEOSPATIAL_DEBUG define has been added to enable or disable this feature. Since new projects do not have this define, a black color will be shown instead, by default. Fixed Fixed bug where a light in b3dm file would cause the application to crash. Fly Camera script has been fixed such that it is no longer possible for the camera to get stuck looking down. [0.1.0-preview.4] - 2020-11-07 Added Docs: Added license file to unitypackage Docs: Added license file in root of build product Docs: Added page to guide use of multiple layers Modified Fly Camera now controls near clip plane and far clip plane automatically Refactored some private variables in Fly Camera to match coding standard [0.1.0-preview.2] - 2020-11-03 Added Docs: Screenshots for more explicit documentation Docs: How to disable fog in Getting Started Changed Changed project file structure Updated Makefile accordingly Built documentation into the Makefile [0.1.0-preview.1] - 2020-11-02 Added Initial release for internal review"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | High Precision Framework | 1.0.0",
    "keywords": "Home Page. This is the home page for this package."
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| High Precision Framework | 1.0.0",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| High Precision Framework | 1.0.0",
    "keywords": "High Precision Framework copyright © 2022 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license ). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting Started | High Precision Framework | 1.0.0",
    "keywords": "Getting Started This getting started guide will show you how to position GameObjects using the high-precision framework. 1. Install the Package First and foremost, install the high-precision framework package using the installation instructions . Once you have completed these steps, you will have a new or existing Unity project with the high-precision framework installed. 2. Create a New Scene Create a new scene in your project. This process can also be used to convert an existing scene. However, we recommend getting an understanding of the high-precision framework before doing so. In this scene, add two cube GameObjects and a camera which we will later position within a high-precision environment. 3. Remove Colliders Unfortunately, as of today, the high-precision framework does not work with the physics engine and can only be used for visualization purposes. For this reason, we will need to remove the colliders from both cube objects. 4. Add High-Precision Components Organize the scene using high-precision components. Create the high-precision Root Add an empty GameObject and call it HPRoot Add an HPRoot component Create a high-precision camera Add an HPTransform to the camera object Make the camera object a child of the HPRoot Create high-precision meshes Add an HPTransform to each of the cubes Make both cubes children of the HPRoot 5. Select a Rebasing Strategy The high-precision framework relies on a rebasing strategy to optimize the position of the GameObjects within the scene. The high-precision framework doesn't perform any magic, it only positions objects in a double-precision universe space to then translate them into Unity's world space where it is rendered using single-precision floating-point numbers. The rebasing strategy defines how the universe-space gets translated into world space. The high-precision framework comes with a LocalCoordinateSystem script which allows us to defined one of our high-precision objects as the object, in universe space, which will always remain very close to the center of our world space. Add this script to the HPRoot object and link the Origin object to the camera. Note: This script is an example of a simple rebasing strategy. The high-precision framework is designed such that any rebasing strategy can be implemented in a similar fashion. Use this script as an example. 6. High-Precision Scripting In order to take advantage of the high-precision framework, you will need to write scripts which position GameObjects within the universe space. To do so, you will need to start using the HPTransform 's API. When using the high-precision framework, you should no longer be using the default Transform 's API. With this setup, you only need to worry about the position of the objects within the universe. The high-precision framework, combined with the selected rebasing script will take care of positioning the objects within world-space for you."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "High-Precision Framework | High Precision Framework | 1.0.0",
    "keywords": "High-Precision Framework The High Precision (HP) framework allows Unity to render very large worlds by providing a standard way of addressing the limitations of the single-precision floating point system that is used to position and render GameObjects within the engine. For more information on the package, please see the full documentation: Installation Getting Started Overview Try It With Our Sample Scene Known Limitations Using Unity Mathematics"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | High Precision Framework | 1.0.0",
    "keywords": "Installation Open your Unity project Note: If you want to create a new, empty project in the editor, do the following steps instead: Open Unity Hub Go to \"Projects\" tab Click on the \"New\" drop-down Choose the editor release version defined in the requirements Create a new project: choose the render pipeline of you choosing and fill in the project name and folder location Open the package manager via Window > Package Manager Select the + > Add package from git URL... . Note: you can also download the repository locally and add it via the Add package from disk... option. Enter the git URL: git@github.com:Unity-Technologies/com.unity.gis.high-precision-framework.git Confirm that the package has been added to the Packages: In Project list of packages."
  },
  "manual/known-limitations.html": {
    "href": "manual/known-limitations.html",
    "title": "Known Limitations | High Precision Framework | 1.0.0",
    "keywords": "Known Limitations Platform Support Currently, only 64 bit windows is fully tested. However, the framework is reported to work on other platforms. Physics Physics can only work in a static rebasing context due to the performance cost of moving colliders. Navigation Mesh Authored navigation meshes can only be used in a static rebasing context. Particle Systems World-space particle simulations may or may not behave as expected depending on the rebasing strategy that is used by the high precision rendering scheme. If dynamic rebasing updates the HPRoot , particles simulated in world space will appear to jump around as a function of the rebasing. Scripts Any script that reads world-space positions will likely behave strangely when using the High Precision Framework. These scripts would need to be written such that only relative values are used or so that they use the HPTransform component rather than the Transform component. Shaders Shaders that rely on world space coordinates, such as tri-planar shaders will behave oddly when used with the High Precision Framework as the world space is constantly being adjusted with dynamic rebasing schemes."
  },
  "manual/overview.html": {
    "href": "manual/overview.html",
    "title": "High Precision API | High Precision Framework | 1.0.0",
    "keywords": "High Precision API The High Precision (HP) framework allows Unity to render very large worlds by providing a standard way of addressing the limitations of the single-precision floating point system that is used to position and render GameObjects within the engine. Notice Currently, only 64 bit windows version is supported. The High Precision Framework version v1.0.0 is compatible with the following versions of the Unity Editor: 2020.3 and later The High Precision Framework is not yet fully integrated with all of Unity's subsystems, such as physics and navigation mesh . See the dedicated page Known Limitations for more information. Introducing Universe Space When using the HP framework, the user will be introduced to two new components: The HPTransform and the HPRoot. The HPTransform acts similarly to the Transform we already know. However, rather than positioning an object in world space, it positions a GameObject in universe space, with double floating point precision. The HPRoot component translates objects positioned in universe space into world space, such that they can be displayed in the scene. It contains a TR (Translation-Rotation) which determines the point in the universe space that corresponds to the root’s position in world space. For example, if the HPRoot has the same TR as an HPTransform, the latter will be positioned, in world space, exactly on the former, with matching rotation and scale. Under most circumstances, the HPRoot’s transform will be set to the origin of the scene. However, there are exceptions. In the case of AR experiences, down-sizing a city contained in HP space and viewing it on a table could be achieved by scaling down the HPRoot and placing it at the center of the table. Rendering HP Space Being in double precision, the universe space can contain planet-scale scenes without needing to worry about precision issues. However, in order to be rendered, it must be translated back into world space. As we have seen in the previous section, the HPRoot controls this process and is the key to implementing various rebasing schemes which dynamically translate our universe space into world space. Static Rebasing Static rebasing is the simplest scheme whereby a single point in universe space is positioned near the origin of world space. This is implemented by setting the HPRoot’s TRS to the specified point of interest. Camera-Centric Dynamic Rebasing Dynamic rebasing is achieved by constantly adjusting the HPRoot’s TRS to a moving point of interest. This can be implemented using the LocalCoordinateSystem component to tie the HPRoot’s TRS to an HPTransform such as that used to position the camera. Local Vertical Coordinate System When rendering a planet, the definition of up depends on where you are standing on the planet. It is often more practical to keep the world space up vector aligned with the planet’s up vector by rotating the HPRoot’s TRS and aligning the HP space’s local up vector with the world’s up vector. An implementation of this is available through the LocalVerticalCoordinateSystem found in the UnityGeospatial framework. Constraints to the Hierarchy Some design constraints need to be taken into consideration when building out the scene’s hierarchy. Before using the HP framework, you should be familiar with the following design principles: An example of a simple HP hierarchy, where some objects are in HP space while others are only in world space. An example of a more complex hierarchy where GameObjects are used for the organization of the scene. An example of multiple HP spaces coexisting within the same scene. Unity Mathematics The HP framework uses Unity Mathematics . See the following page to help you do the transition."
  },
  "manual/sample-scene.html": {
    "href": "manual/sample-scene.html",
    "title": "Try It With Our Sample Scene | High Precision Framework | 1.0.0",
    "keywords": "Try It With Our Sample Scene This guide will show you how to position GameObjects within a hierarchy using the high-precision framework. We will be using a sample scene part of the High Precision Framework package. This scene is composed of 3 assets hierarchy positioned far from each other. These three assets are parented under a single HPRoot and replicate the same hierarchy. Each of them are located to different position via the HPTransform Component assigned to each Geometry object. Location1 / Geometry is located close enough to the center of the world to be manipulated. Location2 and Location3 are so far from the center, it is impossible to manipulate them within the editor. They are outside the floating point range and demonstrate how you can create world with greater range. If you press play, you can easily transition from one location to an other via the buttons on the bottom left corner. 1 - Opening the Sample Scene First, lets open the sample scene. 1.1 - Create a new URP Project Within the Unity Hub, create a new project based on the URP template. 1.2 - Install the Package Install the high-precision framework package using the installation instructions . Once you have completed these steps, you will have the high-precision framework installed in your current project. 1.3 - Import the Samples In the package manager window (Window > Package Manager), select the high-precision framework package by clicking on it. By expanding the samples section, click on the import button. 1.4 - Open the Scene Open the newly imported Sample Scene Samples/High Precision Framework/v1.0.0/Sample Scene/Scenes/SampleScene 2 - Adding an Object to the Scene Now that we have everything setup, lets learn how the high precision framework works. 2.1 - Create a Sphere Create a sphere (GameObject > 3D Object > Sphere). Change its parent by moving it under the HPRoot / Location2 / Geometry GameObject. Set its position to zero (X: 0, Y: 0, Z: 0) 2.2 - Display the result Now, in the scene view, if you frame the sphere (F while the sphere is selected), you won't be able to see the geometry. The position of the parent is too far from the origin. 2.3 - Move the HPRoot Instead of manually modifying the sphere position from the inspector on play mode, we will do it in the editor with the gizmo. In the Hierarchy view, select the HPRoot / Location2 / Geometry game object. In the Inspector, make sure the HPTransform Coordinate System is set to Unity Default. Take note of the position value in the HPTransform. In the Hierarchy view, select the HPRoot. In the Inspector, enter the same position value for the HPRoot (-41546580, 0, 42773180) 2.4 - Move the Sphere Now, if you frame the sphere in the Editor view, you can position it by using the translation gizmo. 2.5 - Play Reset the root position to zero and hit play. You can click on the buttons to switch between camera positions."
  },
  "manual/TableOfContents.html": {
    "href": "manual/TableOfContents.html",
    "title": "| High Precision Framework | 1.0.0",
    "keywords": "High Precision Framework Installation Getting Started Overview Try It With Our Sample Scene Known Limitations Using Unity Mathematics"
  },
  "manual/using-unity-mathematics.html": {
    "href": "manual/using-unity-mathematics.html",
    "title": "Transition from Unity Engine to Unity Mathematics | High Precision Framework | 1.0.0",
    "keywords": "Transition from Unity Engine to Unity Mathematics Multiplication Instead of using the * operator when multiplying vectors and matrices, use the math.mul method. # Engine Vector3 x = new Vector3(1, 2, 3); Vector3 y = new Vector3(4, 5, 6); Vector3 z = x * y; # Mathematics float3 x = new float3(1, 2, 3); float3 y = new float3(4, 5, 6); float3 z = math.mul(x, y); Quaternion Mathematics quaternion are stored in radian values. Methods Ownership Many class / struct methods, has inverting matrices, are now static methods part of the math library. We also added a few in HPMath. # Engine Quaternion rot = Quaternion.Euler(30, 0, 0); Matrix4x4 m = Matrix4x4.TRS(Vector3.zero, rot, Vector3.one); Matrix4x4 inv = m.inverse; # Mathematics quaternion rot = HPMath.EulerZXYDegrees(30, 0, 0); double4x4 m = HPMath.TRS(double3.zero, rot, new float3(1f); Matrix4x4 inv = math.inverse(m); Normalization You can normalize a double3 with math.normalize method, but if you want the same behaviour you had with Unity Engine, you must use math.normalizesafe . Changes from v0.3.3 DBounds have been renamed to DoubleBounds DPlane have been renamed to DoublePlane DMatrix4x4 have been replaced with double4x4 DVector2 have been replaced with double2 DVector3 have been replaced with double3 DVector4 have been replaced with double4"
  }
}